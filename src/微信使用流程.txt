流程
1、用户同意授权，获取code

在确保微信公众账号拥有授权作用域（scope参数）的权限的前提下
（服务号获得高级接口后，默认拥有scope参数中的snsapi_base和snsapi_userinfo），
引导关注者打开如下页面：

https://open.weixin.qq.com/connect/oauth2/authorize?
appid=APPID
&redirect_uri=REDIRECT_URI
&response_type=code
&scope=SCOPE
&state=STATE#wechat_redirect
参考链接(请在微信客户端中打开此链接体验)
Scope为snsapi_base
https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx520c15f417810387&redirect_uri=https%3A%2F%2Fchong.qq.com%2Fphp%2Findex.php%3Fd%3D%26c%3DwxAdapter%26m%3DmobileDeal%26showwxpaytitle%3D1%26vb2ctag%3D4_2030_5_1194_60&response_type=code&scope=snsapi_base&state=123#wechat_redirect
Scope为snsapi_userinfo
https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxf0e81c3bee622d60&redirect_uri=http%3A%2F%2Fnba.bluewebgame.com%2Foauth_response.php&response_type=code&scope=snsapi_userinfo&state=STATE#wechat_redirect


参数	   		是否必须	  	 说明
appid		   是		公众号的唯一标识
redirect_uri   是		授权后重定向的回调链接地址，请使用urlencode对链接进行处理
response_type  是	    返回类型，请填写code
scope		   是		应用授权作用域，snsapi_base （不弹出授权页面，直接跳转，只能获取用户openid），snsapi_userinfo （弹出授权页面，可通过openid拿到昵称、性别、所在地。并且，即使在未关注的情况下，只要用户授权，也能获取其信息）
state	       否		重定向后会带上state参数，开发者可以填写a-zA-Z0-9的参数值，最多128字节
#wechat_redirect	是		无论直接打开还是做页面302重定向时候，必须带此参数

code作为换取access_token的票据，每次用户授权带上的code将不一样，code只能使用一次，5分钟未被使用自动过期。

第二步：通过code换取网页授权access_token

首先请注意，这里通过code换取的是一个特殊的网页授权access_token,
与基础支持中的access_token（该access_token用于调用其他接口）不同。
公众号可通过下述接口来获取网页授权access_token。如果网页授权的作用域为snsapi_base，
则本步骤中获取到网页授权access_token的同时，也获取到了openid，snsapi_base式的网页授权流程即到此为止。

尤其注意：由于公众号的secret和获取到的access_token安全级别都非常高，必须只保存在服务器，
不允许传给客户端。后续刷新access_token、通过access_token获取用户信息等步骤，也必须从服务器发起。

请求方法

获取code后，请求以下链接获取access_token： 
https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&secret=SECRET&code=CODE&grant_type=authorization_code
参数说明

参数			是否必须			说明
appid			是			公众号的唯一标识
secret			是			公众号的appsecret
code				是			填写第一步获取的code参数
grant_type		是			填写为authorization_code
返回说明

正确时返回的JSON数据包如下：

{
   "access_token":"ACCESS_TOKEN",  //需要保存
   "expires_in":7200,
   "refresh_token":"REFRESH_TOKEN",
   "openid":"OPENID",
   "scope":"SCOPE"
}

参数	描述
access_token	网页授权接口调用凭证,注意：此access_token与基础支持的access_token不同
expires_in	access_token接口调用凭证超时时间，单位（秒）
refresh_token	用户刷新access_token
openid	用户唯一标识，请注意，在未关注公众号时，用户访问公众号的网页，也会产生一个用户和公众号唯一的OpenID
scope	用户授权的作用域，使用逗号（,）分隔






通过 ACCESS_TOKEN
调用一下接口
https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&type=jsapi
返回 一下json
	{
	"errcode":0,
	"errmsg":"ok",
	"ticket":"bxLdikRXVbTPdHSM05e5u5sUoXNKd8-41ZO3MhKoyN5OfkWITDGgnr2fwJ0m9E8NYzWKVZvdVtaUgWvsdshFKA",
	"expires_in":7200
	}
	

获取 jsapi_ticket之后，就可以生成JS-SDK权限验证的签名了。
签名算法

签名生成规则如下：
参与签名的字段包括
	noncestr（随机字符串）,
	有效的jsapi_ticket, 
	timestamp（时间戳）, 
	url（当前网页的URL，不包含#及其后面部分） 
对所有待签名参数按照字段名的ASCII 码从小到大排序（字典序）后，
使用URL键值对的格式（即key1=value1&key2=value2…）拼接成字符串string1。
这里需要注意的是所有参数名均为小写字符。对string1作sha1加密，
字段名和字段值都采用原始值，不进行URL 转义。


即signature=sha1(string1)。 
示例：
	
	noncestr=Wm3WZYTPz0wzccnW
	jsapi_ticket=sM4AOVdWfPE4DxkXGEs8VMCPGGVi4C3VM0P37wVUCFvkVAy_90u5h9nbSlYy3-Sl-HhTdfl2fzFy1AOcHKP7qg
	timestamp=1414587457
	url=http://mp.weixin.qq.com?params=value

步骤1. 对所有待签名参数按照字段名的ASCII 码从小到大排序（字典序）后，
	  使用URL键值对的格式（即key1=value1&key2=value2…）拼接成字符串string1：

“jsapi_ticket=sM4AOVdWfPE4DxkXGEs8VMCPGGVi4C3VM0P37wVUCFvkVAy_90u5h9nbSlYy3-Sl-HhTdfl2fzFy1AOcHKP7qg
&noncestr=Wm3WZYTPz0wzccnW
&timestamp=1414587457
&url=http://mp.weixin.qq.com?params=value”

步骤2. 对string1进行sha1签名，得到signature：

0f9de62fce790f9a083d5c99e95740ceb90c27ed
注意事项

签名用的noncestr和timestamp必须与wx.config中的nonceStr和timestamp相同。
签名用的url必须是调用JS接口页面的完整URL。
出于安全考虑，开发者必须在服务器端实现签名的逻辑。


